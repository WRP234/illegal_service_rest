package com.xcs.illegal.p2.dao;


import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import com.xcs.illegal.p2.constant.Pattern;
import com.xcs.illegal.p2.model.Lawbreaker;
import com.xcs.illegal.p2.request.LawbreakerReq;

@Service
@Transactional
public class LawbreakerDAOImpl extends LawbreakerExt implements LawbreakerDAO{
	
	private static final Logger log = LoggerFactory.getLogger(LawbreakerDAOImpl.class);
	
	@Override
	public List<Lawbreaker> LawbreakergetData(LawbreakerReq req) {
		
//		String tempOccurrenceDateFrom  = "";
//		String tempOccurrenceDateTo = "";
//		
//		String tempCastDateFrom   = "";
//		String tempCastDateTo = "";
//		
//		if(!"".equals(req.getOCCURRENCE_DATE_FROM())) {
//			tempOccurrenceDateFrom = String.format("%s %s", req.getOCCURRENCE_DATE_FROM(), Pattern.TIME_FROM);
//		}	
//		if(!"".equals(req.getOCCURRENCE_DATE_TO())) {
//			tempOccurrenceDateFrom = String.format("%s %s", req.getOCCURRENCE_DATE_TO(), Pattern.TIME_FROM);
//		}
//		
//		if(!"".equals(req.getCASE_DATE_FROM())) {
//			tempOccurrenceDateFrom = String.format("%s %s", req.getCASE_DATE_FROM(), Pattern.TIME_FROM);
//		}		
//		if(!"".equals(req.getCASE_DATE_TO())) {
//			tempOccurrenceDateFrom = String.format("%s %s", req.getCASE_DATE_TO(), Pattern.TIME_FROM);
//		}
//		
//		String str = "";
//		
//		if(req.getOFFICE_CODE() != null && !"".equals(req.getOFFICE_CODE()) && !"00".equals(req.getOFFICE_CODE())) {			
//			if(req.getOFFICE_CODE().length() == 6) {
//				if("00".equals(req.getOFFICE_CODE().substring(0, 2))) {
//					str = " ";
//				}else if("0000".equals(req.getOFFICE_CODE().substring(2, 6))) {
//					str = " AND (SUBSTR(aa.OFFCODE,1,2) = SUBSTR('"+req.getOFFICE_CODE()+"',1,2)) ";
//				}else if("00".equals(req.getOFFICE_CODE().substring(4, 6))) {
//					str = " AND (SUBSTR(aa.OFFCODE,1,4) = SUBSTR('"+req.getOFFICE_CODE()+"',1,4)) ";
//				}else {
//					str = " AND (aa.OFFCODE = '"+req.getOFFICE_CODE()+"') ";
//				}			
//			}			
//		}
		
		StringBuilder sqlBuilder = new StringBuilder()
			    .append("SELECT DISTINCT ")
			    .append("bi.TRACK_NO, bi.CASE_ID, aa.OFFCODE, eo.SHORT_NAME, ")
			    .append("aa.SCENE_NAME, aa.SCENE_NO, aa.SCENE_MOO, ")
			    .append("aa.SCENE_SOI, aa.SCENE_ROAD, aa.SCENE_SUBDISTRICT, ")
			    .append("aa.SCENE_DISTRICT, aa.SCENE_PROVINCE, aa.HAVE_CULPRIT ")
			    .append("FROM ILLEGAL.BOOK_IMPEACHMENT bi ")
			    .append("LEFT JOIN ILLEGAL.APPLICATION_ARREST aa ON bi.TRACK_NO = aa.TRACK_NO ")
			    .append("LEFT JOIN ILLEGAL.APPLICATION_ARREST_INDICTMENT aai ON bi.TRACK_NO = aai.TRACK_NO ")
			    .append("LEFT JOIN ILLEGAL.ED_OFFICE eo ON aa.OFFCODE = eo.OFFCODE ")
			    .append("WHERE aa.del_flag = 'N' ");

			if (req.getTRACK_NO() != null && !req.getTRACK_NO().isEmpty()) {
			    sqlBuilder.append(" AND bi.TRACK_NO LIKE ? ");
			}

			log.info("[SQL] : " + sqlBuilder.toString());

			Object[] params = req.getTRACK_NO() != null ? new Object[]{"%" + req.getTRACK_NO() + "%"} : new Object[]{};

			@SuppressWarnings("deprecation")
			List<Lawbreaker> dataList = getJdbcTemplate().query(sqlBuilder.toString(), params, new RowMapper<Lawbreaker>() {
			    @Override
			    public Lawbreaker mapRow(ResultSet rs, int rowNum) throws SQLException {
			        Lawbreaker item = new Lawbreaker();
			        item.setTRACK_NO(rs.getString("TRACK_NO"));
			        item.setCASE_ID(rs.getInt("CASE_ID"));
			        item.setOFFCODE(rs.getString("OFFCODE"));
			        item.setSHORT_NAME(rs.getString("SHORT_NAME"));
			        item.setSCENE_NAME(rs.getString("SCENE_NAME"));
			        item.setSCENE_NO(rs.getString("SCENE_NO"));
			        item.setSCENE_MOO(rs.getString("SCENE_MOO"));
			        item.setSCENE_SOI(rs.getString("SCENE_SOI"));
			        item.setSCENE_ROAD(rs.getString("SCENE_ROAD"));
			        item.setSCENE_SUBDISTRICT(rs.getString("SCENE_SUBDISTRICT"));
			        item.setSCENE_DISTRICT(rs.getString("SCENE_DISTRICT"));
			        item.setSCENE_PROVINCE(rs.getString("SCENE_PROVINCE"));
			        item.setHAVE_CULPRIT(rs.getString("HAVE_CULPRIT"));

				return item;
			}			
		});
		return dataList;
	}
}
